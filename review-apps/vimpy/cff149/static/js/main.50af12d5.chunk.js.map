{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","winnerClass","onClick","value","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","winnerSquares","squares","createBoard","React","Component","initialState","history","Array","fill","currentStepNumber","xIsNext","Game","state","length","slice","currentLocation","setState","concat","stepNumber","step","reverse","status","current","lines","a","b","c","winner","winnerRow","calculateWinner","moves","map","move","desc","classButton","jumpTo","handleClick","sortMoves","reset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50af12d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = props => (\n  <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n    {props.value}\n  </button>\n);\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++, i+1, j+1));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i, row, col) {\n    const winnerClass =\n      this.props.winnerSquares &&\n      (this.props.winnerSquares[0] === i ||\n        this.props.winnerSquares[1] === i ||\n        this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i, row, col)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\n\nconst calculateWinner = (squares) => {\n  // Operation\n  const lines = [\n    [0, 4, 2],\n    [0, 4, 6],\n    [2, 4, 8],\n    [6, 4, 8],\n  ];\n  for (let i=0;i<lines.length;i++){\n    let [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], winnerRow: lines[i]}\n    }\n  }\n  return { winner: null, winnerRow: null };\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  xIsNext: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  handleClick(i, row, col) {\n    // Operation\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    squares[i] = this.state.xIsNext === true ? 'X' : 'O';\n    const currentLocation = {\n      row: row, \n      col: col\n    }\n    this.setState({\n      history: history.concat([{squares:squares, currentLocation: currentLocation, stepNumber: history.length}]), \n      xIsNext: !this.state.xIsNext, \n      currentStepNumber: history.length\n    });\n  }\n\n  jumpTo(step) {\n    // Operation\n    this.setState({\n      currentStepNumber: step,\n      xIsNext: step%2 === 0\n    });\n  }\n\n  sortMoves() {\n    // Operation\n    const { history } = this.state;\n    history.reverse();\n    this.setState({\n      history: history\n    });\n  }\n\n  reset() {\n    // Operation\n    this.setState(initialState);\n  }\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const currentLocation = step.currentLocation ? `(row: ${step.currentLocation.row }, col: ${step.currentLocation.col })` : '';\n      const desc = step.stepNumber ? `Go to move #${step.stepNumber}` : 'Go to game start';\n      const classButton = move === this.state.currentStepNumber ? 'button--green' : '';\n\n      return (\n        <li key={move}>\n          <button className={`${classButton} button`} onClick={() => this.jumpTo(move)}>\n            {`${desc} ${currentLocation}`}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = `Winner ${winner}`;\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={(i, row, col)  => this.handleClick(i, row, col)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button className=\"button\" onClick={() => this.sortMoves()}>\n            Sort moves\n          </button>\n          <button className=\"button button--new-game\" onClick={() => this.reset()}>\n            New game\n          </button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}